---
layout: post
title:  "1장 계층화"
date:   2021-11-10 03:01:09 +0900
categories: jekyll update
---


**엔터프라이즈 애플리케이션에서 계층의 발전**

    - 초반은 client에 도매인 논리를 추가하는 방법 사용
        - 도메인 논리가 복잡해지면 작업이 매우 어려워짐
        - 유지보수 어려움
            - 대안으로 DB 프로시저에 도메인 논리 삽입
                - SQL의 표준이기 때문에 DB벤더를 바꾸기 용이하기 때문
                - 그러나, 프로시저는 DB 벤더에 종속 됨

    - 객체 커뮤니티에서 도메인 논리 문제에 대한 해결책으로 3계층 시스템을 제안
        - **프레젠테이션 계층, 도메인 계층, 데이터 원본**
        - 이 방식을 통해 복잡한 논리를 UI에서 분리해 별도의 계층으로 만들고 객체를 활용해 올바른 구조로 만들 수 있었음
        - client-server 툴에서는 3계층 구성을 사용하기가 어렵거나 불가능

- 웹이 등장하면서 client-server app을 웹 서비스로 전환
    - 모든 비즈니스 논리 전면적 수정 필요
    - 웹 페이지 작성 작성 툴은 SQL과의 결합이 훨씬 느슨하여 계층화 하기 유리 함

* * *

**세 가지 주요 계층**

    - 프레젠테이션 계층
        - 리치클라이언트 그래픽 UI, HTML 기반 브라우저 UI
        - 리치클라이언트
            - 윈도우,
            - 스윙(https://coding-factory.tistory.com/263, eclipse 같은건가?),
            - 팻(https://ko.wikipedia.org/wiki/%EC%8B%A0_%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8,,  현대에 잘 알려진 형태의 신 클라이언트로는 최종 사용자에게 [그래픽 사용자 인터페이스](https://ko.wikipedia.org/wiki/%EA%B7%B8%EB%9E%98%ED%94%BD_%EC%82%AC%EC%9A%A9%EC%9E%90_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4)만을 제공하는 저사양의 [단말기](https://ko.wikipedia.org/wiki/%EB%8B%A8%EB%A7%90%EA%B8%B0)이다)

    - 데이터 원본 계층
        - 다른 시스템과 통신
            - 데이터베이스
            - API 사용 모듈 같은거?

    - 비즈니스 논리 계층
        - 계산, 유효성 검사-> 비즈니스 로직

    - 다른 사람에게 서비스로 제공하는 인터페이스와, 다른 사람이 서비스를 사용하기 위한 인터페이스를 구분할 수 있는 비대칭이 유용
        - 프레젠테이션 : 다른사람에게 서비스를 제공하는 서비스에대한 인터페이스
        - 데이터 원본 : 프로그램에 제공하는 서비스에 대한 외부 인터페이스

- 분리 외에 의존성에 대한 중요한 규칙
    - 도메인과 데이터 원본은 프레젠테이션에 의존하지 않아야 한다!
    - 이점
        - 다른 프레젠테이션으로 교체가 용이,
        - 프레젠테이션 수정이 용이

* * *

**계층이 실행될 위치 선택**

- 프리젠테이션 계층, 데이터원본 계층
    - 처리를 수행할 위치를 선택하는 것이 중요(데스크톱 or 서버)
        - 서버에서 실행
            - 웹 브라우저를 활용하는 html 프런트엔트
                - 장점 : 업그레이드, 수정, 배포 용이함
                - 단점 : 네트워크를 통해 서버와 통신하기 때문에, 응답성 떨어짐
        - 클라이언트 실행
            - 장점 : 응답성, 비연결 작업의 유리함

        - 예시
            - B2C 시스템( 웹 어플리케이션)
                - 다양한 소비자들이 이용해야 하기 떄문에 모든 처리를 서버에서 함(웹 어플리케이션 형태를 취하는 이유)
            - 리치클라이언트
                - 웹 GUI가 제공하는 것 이상의 기능이 필요한 경우
                - 지양하는 추세
- 도메인 계층
    - 서버에서 실행하는 것이 최선
        - 업그레이드, 수정, 배포가 용이하기 때문
        - 클라이언트로 옮겨오는 경우 : 응답성개선, 비연결 작업 개선
    - 로직 일부를 클라이언트에서 실행해야 한다면, 모든 로직을 클라이언트에서 실행하는 것을 고려할 수 있음
        - 장점 : 응답성개선도 있지만, 비연결 작업문제를 해결하는 방법일 수 있음
        - 단점 : 업그레이드, 유지 관리 어려움
    - 데스크톱과 서버에 로직을 분할하는 방법
        - 기준이 없기 때문에 최악
        - 독립적인 로직으로 만드는 것이 바람직

* * *

IOC(Inversion Of Controller)
https://chanhuiseok.github.io/posts/spring-4/

AOC
https://engkimbs.tistory.com/746




