---
layout: post
title:  "들어가며"
date:   2021-11-02 03:01:09 +0900
categories: jekyll update
---



## 아키텍쳐란

    요약: 아키텍쳐에 대한 정의를 내림

-   시스템을 구성 요소로 나누는 최상위 수준의 분해
-   번복하기 어려운 결정
    
-   랄프 존슨
	-   프로젝트에 참여하는 전문 개발자의 시스템 설계에 대한 공유된 이해를 반영하는 주관적 개념
    

		-   공유된 이해 : 시스템의 중요 컴포넌트, 컴포넌트 간의 상호작용
    

	-   개발자들이 일찍, 올바르게 내리고 싶어하는 것

## 이책은 ~에 대한 책!

    요약: 이 책에서는 이런 내용을 다름

-   엔터프라이즈 어플리케이션을 계층으로 분할하는 방법
    
-   계층이 상호작용하는 방법

## 엔터프라이즈 어플리케이션

    요약: 엔터프라이즈 app에 대한 특징 언급

 -   비즈니스 규칙을 처리하는 경우 많음
    
 -   특정 분야에만 적용되는 기법과 패턴이 많음
    
 -   특징
		-   지속적 데이터를 처리 함
		    
		-   막대한 양의 데이터를 처리함
		    
		-   여러 사람이 동시에 데이터에 접근
		    
		-   사용자 인터페이스 화면 수 많음
			 - [ ] 위 특징이 있기 때문에, 효율적인 구조, sw 구조를 지향해야 함
		- 단독으로 운영되는 경우가 거의 없음 (각기다른 기술base, 다른 시기에 구축됨)
			 - [ ] 통합을 위해선 표준 정의가 필요 
			 - [ ] MCI가 필요한 이유이기도 함

## 엔터프라이즈 어플리케이션의 유형

    요약: E.APP 유형 언급하며, 아키텍쳐 설계의 핵심을 설명

-   설계에 있어 중요한 점
    

	-   비즈니스 유형 별, 다양한 대안(패턴)이 무엇인지 알고 있어야 하며,
	    
	-   그 대안들의 장단점들을 고려하여 결정하는 것

-   예시
    

	-   B2C - 온라인 쇼핑몰
    

		-   많은 사용자 트렌젝션을 견뎌야 함
    

			-   리소스 활용이 효율적이어야 함
    

				 - [ ] 소스레벨 부하테스트 (ex. tps별, jvm, cpu 사용율 테스트)

    

				 - [ ] sql 튜닝

    

			-   HW를 추가해 쉽게 규모를 확장할 수 있어야 함
    

				 - [ ] 수평 scale up 이 용이하도록 설계 되어야 함.

    

	-   B2B - K  
    

		-   고객 수 적음
    
		-   비즈니스 로직 복잡함
    

			-   []why?
    

				-   재XXX이기 때문
    

					-   보험사의 보험사 -> 계약의 내용 복잡
    

				-   화면 비즈니스 로직 복잡, 본수 많음
    

	-   소규모기업 sw  
	    

		-   사용자수 적음
		    
		-   비즈니스 로직 단순
		    
		-   짧은 시간안에 구축히야 함 -> 비용때문

-   그러므로!
    

	-   아키텍쳐를 설계한다는 것은
    

		-   시스템의 특정한 문제를 이해하고,
    
		-   이러한 이해를 바탕으로 적절한 설계를 선택한다는 의미

  

## 성능에 대한 고려

    요약: 성능에 대한 논의가 어려우니, 용어정리라도 하자
    
-   성능에 대해 논의하는 것이 어려움

	-   실제 구성에서 확인하기 전까지는 성능에 대한 어떤 조언을 사실로 받아들일 수 없기 떄문.
	    
	-   많은 용어가 일관성 없이 사용되고 있기 때문

-   그래서 성능 관련 용어를 정의한다
    
-   응답시간
	-   시스템이 외부에서 요청을 처리하는 데 걸리는 시간 

-   응답성
	-   시스템이 요청을 얼마나 신속하게 인식?
	    
	-   파일 progress bar
		-   응답시간 개선 없음
    
		-   응답성은 개선

- 대기시간
	-    네트워크 대기 시간?
	    
	-   개발자가 대기시간 줄이기 위해 할 수 있는 것 없음

-   처리량
    

	-   초당 트랜잭션(tps)
    

-   성능
   
    

-   부하
    

	-   현재 처리하고 있는 작업량
	    
	-   연결된 사용자 수 로 측정
    

-   부하 민감도
    

	-   부하에 따른 응답 시간의 변화
    

-   효율
    

	-   2 core, 30tps > 4core, 40tps

-   확장성
    

	-   리소스를 추가 했을 때, 성능에 미치는 영향
	    
	-   엔터프라이즈 시스템에서 성능과 확장성
    

		-   효율보다는 hw확장성에 중점을 두는 것이 유리한 경우 많음

## 패턴

    요약: 패턴이 중요한 이유

-   하나 이상의 반복적인 문제를 해결하는 데 효과적이고 공통적인 해결책!
    
-   우리의 지향점
    

	-   what is pattern?
	    
	-   what problem do I solve using pattern?
	    
	-   how to solve problem with pattern?
    

-   그대로 적용하는 것은 불가-> custom 필요
    
-   패턴의 가치!
    

	- 자신의 개념을 다른 사람과 원활하게 의사소통
	- 즉, 패턴은 내 안에서 나온 해결책을 다른사람에게 전달이 용이 하게 함

## 패턴의 구조
-   패턴의 이름
    
	-   목적
    

		-   한두문장으로 패턴을 요약
    

	-   스케치
    

		-   시각적을인 묘사
